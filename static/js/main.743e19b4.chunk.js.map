{"version":3,"sources":["ShoppingListForm.js","ShoppingList.js","App.js","serviceWorker.js","index.js"],"names":["ShoppingListForm","props","handleSubmit","event","preventDefault","addItem","state","setState","name","qty","handleChange","target","value","onSubmit","this","htmlFor","id","onChange","Component","ShoppingList","item","newItem","uuid","st","items","renderItems","map","oneItem","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RA+CeA,E,kDA5CX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAOVC,aAAe,SAACC,GACZA,EAAMC,iBACN,EAAKH,MAAMI,QAAQ,EAAKC,OACxB,EAAKC,SAAS,CACVC,KAAO,GACPC,IAAM,MAbI,EAgBlBC,aAAe,SAACP,GACZ,EAAKI,SAAL,eACKJ,EAAMQ,OAAOH,KAAOL,EAAMQ,OAAOC,SAhBtC,EAAKN,MAAQ,CACTE,KAAM,GACNC,IAAK,IAJK,E,qDAsBd,OACI,0BAAMI,SAAUC,KAAKZ,cACjB,2BAAOa,QAAQ,QAAf,UACA,2BACIC,GAAG,OACHR,KAAK,OACLI,MAAOE,KAAKR,MAAME,KAClBS,SAAUH,KAAKJ,eAEnB,2BAAOK,QAAQ,OAAf,cACA,2BACIC,GAAG,MACHR,KAAK,MACLI,MAAOE,KAAKR,MAAMG,IAClBQ,SAAUH,KAAKJ,eAEnB,kD,GAvCeQ,a,gBC2ChBC,E,kDAxCX,WAAYlB,GAAO,IAAD,8BACd,cAAMA,IAQVI,QAAU,SAAAe,GACN,IAAIC,EAAO,2BAAOD,GAAP,IAAaJ,GAAIM,QAC5B,EAAKf,UAAS,SAAAgB,GAAE,MAAK,CACjBC,MAAM,GAAD,mBAAMD,EAAGC,OAAT,CAAgBH,SAZX,EAiBlBI,YAAc,WACV,OACI,4BACK,EAAKnB,MAAMkB,MAAME,KAAI,SAAAC,GAAO,OACzB,wBAAIC,IAAKD,EAAQX,IACZW,EAAQnB,KADb,MACsBmB,EAAQlB,UApB1C,EAAKH,MAAQ,CACTkB,MAAO,CACH,CAAChB,KAAM,OAAQC,IAAK,KAAMO,GAAIM,SAJxB,E,qDA8Bd,OACI,6BACI,6CACCR,KAAKW,cACN,kBAAC,EAAD,CAAkBpB,QAASS,KAAKT,e,GAnCrBa,a,MCQZW,MARf,WACE,OACE,yBAAKC,UAAU,IACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.743e19b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ShoppingListForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            name: \"\",\n            qty: \"\"\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.addItem(this.state);\n        this.setState({\n            name : \"\",\n            qty : \"\"\n        })\n    }\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    render(){\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <label htmlFor='name'>Name: </label>\n                <input \n                    id='name'\n                    name='name'\n                    value={this.state.name}\n                    onChange={this.handleChange}\n                />\n                <label htmlFor='qty'>Quantity: </label>\n                <input \n                    id='qty'\n                    name='qty'\n                    value={this.state.qty}\n                    onChange={this.handleChange}\n                />\n                <button>Add Item!</button>\n            </form>\n        );\n    }\n}\n\nexport default ShoppingListForm;","import React, { Component } from 'react';\nimport ShoppingListForm from './ShoppingListForm';\nimport uuid from 'uuid/dist/v4';\n\nclass ShoppingList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            items: [\n                {name: \"Milk\", qty: \"20\", id: uuid()},            \n            ]\n        };\n    }\n\n    addItem = item => {\n        let newItem = {...item, id: uuid() };\n        this.setState(st => ({\n            items: [...st.items, newItem]\n        }));\n    }\n   \n\n    renderItems = () => {\n        return (\n            <ul>\n                {this.state.items.map(oneItem => (\n                    <li key={oneItem.id}>\n                        {oneItem.name} : {oneItem.qty}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n\n    render(){\n        return(\n            <div>\n                <h1>Shopping list</h1>\n                {this.renderItems()}\n                <ShoppingListForm addItem={this.addItem} />\n            </div>\n        );\n    }\n}\n\nexport default ShoppingList;","import React from 'react';\nimport ShoppingList from './ShoppingList.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <ShoppingList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}